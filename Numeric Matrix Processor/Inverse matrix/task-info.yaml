type: edu
custom_name: stage6
files:
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import processor.MainKt;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        String feedback;
        ArrayList<Double> answers;

        TestClue(String feedback, Double[] answers) {
            this.feedback = feedback;
            this.answers = new ArrayList<>(Arrays.asList(answers));
        }
    }

    public class NumericMatrixProcessorTest extends StageTest<TestClue> {

        public NumericMatrixProcessorTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            7d, 13d, 132d,
                            17d, 23d, 45d,
                            65d, 57d, 78d
                        }))
                    .setInput(
                        "1\n"+
                            "3 3\n" +
                            "3 4 55\n" +
                            "4 1 1\n" +
                            "9 0 0\n" +
                            "3 3\n" +
                            "4 9 77\n" +
                            "13 22 44\n" +
                            "56 57 78\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            43.13d, 911.62d, 1311.8d, 136.53d,
                            -4.2d, 141.1d, -1.09d, 1421.6d,
                            230.33d, 114.2d, 100.7d, 990.4d,
                            956.72d, 168.94d, 112.16d, 27.0d
                        }))
                    .setInput(
                        "1\n"+
                            "4 4\n" +
                            "-0.3 677.4 435.2 123.33\n" +
                            "1.3 141.4 0.11 1411.4\n" +
                            "231.33 113.4 99.9 999.9\n" +
                            "1002.22 123.44 55.66 13.3\n" +
                            "4 4\n" +
                            "43.43 234.22 876.6 13.2\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            187d, 3978d, 7548d,
                            7752d, 5831d, 3774d,
                            16949d, 7752d, 7752d
                        }))
                    .setInput(
                        "2\n" +
                            "3 3\n" +
                            "11 234 444\n" +
                            "456 343 222\n" +
                            "997 456 456\n" +
                            "17\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            1123653d, 5933505d, 110927295d, 2365632d,
                            1505049d, 8619594d, 25665531d, 3833274d,
                            1366632d, 2598732d ,37999962d, 58303305d,
                            11068143d, 9781653d ,13666653d ,13443321d
                        }))
                    .setInput(
                        "2\n" +
                            "4 4\n" +
                            "10123 53455 999345 21312\n" +
                            "13559 77654 231221 34534\n" +
                            "12312 23412 342342 525255\n" +
                            "99713 88123 123123 121111\n" +
                            "111\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            45d, 113d, 11d, 266d,
                            84d, 139d, 29d, 229d,
                            45d, 49d, 35d, 100d,
                            15d, 86d, 0d, 281d ,
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "1 2 2 7\n" +
                            "3 3 4 5\n" +
                            "5 0 0 1\n" +
                            "0 1 0 8\n" +
                            "4 4\n" +
                            "9 8 7 13\n" +
                            "15 14 0 1\n" +
                            "3 7 2 3\n" +
                            "0 9 0 35\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            243d, 295d, 78d, 60d,
                            724d, 798d, 2063d, 175d
                        }))
                    .setInput(
                        "3\n" +
                            "2 3\n" +
                            "1 0 17\n" +
                            "15 19 7\n" +
                            "3 4\n" +
                            "5 6 78 9\n" +
                            "29 31 47 1\n" +
                            "14 17 0 3\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if you can do more than one operation in a loop",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d,
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 2 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 5 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 2 4\n" +
                            "4 6 6\n" +
                            "7 7 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 5 4\n" +
                            "4 6 6\n" +
                            "7 7 1.0\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "3\n" +
                            "4 4\n" +
                            "6 5 4 2\n" +
                            "8 7 6 6\n" +
                            "1 0 0 5.0\n" +
                            "9 2 8 8\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "4\n" +
                            "4 4\n" +
                            "8 8 2 9\n" +
                            "5 0 0 1\n" +
                            "6 6 7 8.0\n" +
                            "2 4 5 6\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            31d
                        }))
                    .setInput(
                        "5\n" +
                            "3 3\n" +
                            "1 2 3\n" +
                            "4 5 7\n" +
                            "10 22 23\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            45.2197d
                        }))
                    .setInput(
                        "5\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            1.14717, 2.03717, 2.9711,
                            2.19055, 4.52055, 7.20788,
                            3.67009, 0.590087, 1.33819
                        }))
                    .setInput(
                        "6\n" +
                            "3 3\n" +
                            "0.396796 -0.214938 0.276735\n" +
                            "5.19655 -2.06983 -0.388886\n" +
                            "-3.3797 1.50219 0.159794\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            0.396796, -0.214938, 0.276735, -0.5092,
                            5.19655, -2.06983, -0.388886, -3.14252,
                            -3.3797, 1.50219, 0.159794, 2.04842,
                            -0.593332, 0.230065, 0.00259267, 0.50345
                        }))
                    .setInput(
                        "6\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0")
            );
        }


        @Override
        public CheckResult check(String reply, TestClue clue) {

            try {

                String[] strNumbers =
                    Arrays.stream(reply.trim().split("\n"))
                    .filter(line -> {
                        line = line.trim();
                        if (line.length() == 0) {
                            return false;
                        }
                        for (char c : line.toCharArray()) {
                            if (!(c == ' ' ||
                                c >= '0' && c <= '9' ||
                                c == '.' ||
                                c == '-' || c == '+' ||
                                c == 'e' || c == 'E')) {
                                return false;
                            }
                        }
                        return true;
                    }).reduce("", (a, b) -> a + " " + b)
                    .trim().split("\\s+");

                double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();

                double[] expected =
                    clue.answers.stream()
                        .mapToDouble(e -> e)
                        .toArray();
                if (actual.length != expected.length) {
                    return new CheckResult(false, clue.feedback);
                }

                for (int i = 0; i < actual.length; i++) {
                    if (abs(actual[i] - expected[i]) > 0.01) {
                        return new CheckResult(false, clue.feedback);
                    }
                }
            }
            catch (Exception ex) {
                return new CheckResult(false, "Can't check the answer");
            }

            return CheckResult.correct();

        }

    }
  learner_created: false
- name: src/processor/Main.kt
  visible: true
  text: |-
    package processor

    import java.lang.RuntimeException
    import java.util.*
    import kotlin.collections.ArrayList

    sealed class Matrix<T : Number>(val rows: Int, val columns: Int, filler: ((Int, Int) -> T)? = null) {

        protected abstract val matrix: Array<Array<T>>

        fun getColumn(index: Int): ArrayList<T> {
            val column = ArrayList<T>(rows)
            for (i in 0 until rows) {
                column[i] = matrix[i][index]
            }
            return column
        }

        operator fun get(row: Int) = matrix[row]

        operator fun get(row: Int, column: Int) = matrix[row][column]

        operator fun set(row: Int, array: Array<T>) {
            matrix[row] = array
        }

        operator fun set(row: Int, column: Int, value: T) {
            matrix[row][column] = value
        }

        @Throws(WrongMatrixSize::class)
        abstract operator fun plus(matrix: Matrix<*>): Matrix<T>

        @Throws(WrongMatrixSize::class)
        abstract operator fun minus(matrix: Matrix<*>): Matrix<T>

        @Throws(WrongMatrixSize::class)
        abstract operator fun times(matrix: Matrix<*>): Matrix<T>

        abstract operator fun times(number: Int): Matrix<T>

        abstract operator fun times(number: Double): Matrix<T>

        abstract fun determinant(): Double

        // Used by super class `Matrix` to create
        // new instance of sub type of required size
        // without knowing the actual type
        protected abstract fun newInstance(rows: Int, columns: Int, filler: (Int, Int) -> T): Matrix<T>

        override fun toString(): String {
            return buildString {
                for (row in 0 until rows) {
                    append(this@Matrix[row].joinToString(separator = " ", postfix = "\n"))
                }
            }
        }

        fun transpose(command: TransposeCommand) =
                when (command) {
                    TransposeCommand.VerticalLine -> reverse(Direction.LeftToRight)
                    TransposeCommand.HorizontalLine -> reverse(Direction.TopToBottom)
                    TransposeCommand.MainDiagonal -> {
                        newInstance(columns, rows) { row, column -> this[column][row] }
                    }
                    TransposeCommand.SideDiagonal -> {
                        newInstance(columns, rows) { row, column -> this[rows - 1 - column][columns - 1 - row] }
                    }
                    else -> this
                }

        private fun reverse(direction: Direction): Matrix<T> {
            when (direction) {
                Direction.TopToBottom, Direction.BottomToTop -> matrix.reverse()
                Direction.LeftToRight, Direction.RightToLeft -> matrix.forEach { it.reverse() }
            }
            return this
        }
    }

    sealed class Direction {
        object TopToBottom : Direction()
        object BottomToTop : Direction()
        object LeftToRight : Direction()
        object RightToLeft : Direction()
    }

    class NumberMatrix(rows: Int, columns: Int, filler: ((Int, Int) -> Number)? = null) : Matrix<Number>(rows, columns, filler) {
        override val matrix: Array<Array<Number>> = Array(rows) { row ->
            Array(columns) { column ->
                filler?.invoke(row, column) ?: 0
            }
        }

        override fun plus(matrix: Matrix<*>) =
                when {
                    this.rows == matrix.rows && this.columns == matrix.columns -> {
                        NumberMatrix(this.rows, this.columns) { row, column ->
                            this[row][column].toDouble() + matrix[row][column].toDouble()
                        }
                    }
                    else -> throw WrongMatrixSize(this, matrix)
                }

        override fun minus(matrix: Matrix<*>) =
                when {
                    this.rows == matrix.rows && this.columns == matrix.columns -> {
                        NumberMatrix(this.rows, this.columns) { row, column ->
                            this[row][column].toDouble() - matrix[row][column].toDouble()
                        }
                    }
                    else -> throw WrongMatrixSize(this, matrix)
                }

        override fun times(matrix: Matrix<*>) =
                when (this.columns) {
                    matrix.rows -> {
                        NumberMatrix(rows, matrix.columns) { row, column ->
                            var value = 0.0
                            for (i in 0 until this.columns) {
                                value += this[row][i].toDouble() * matrix[i][column].toDouble()
                            }
                            value
                        }
                    }
                    else -> throw WrongMatrixSize(this, matrix)
                }

        override fun times(number: Int) =
                NumberMatrix(this.rows, this.columns) { row, column ->
                    this[row][column].toDouble() * number
                }

        override fun times(number: Double) =
                NumberMatrix(this.rows, this.columns) { row, column ->
                    this[row][column].toDouble() * number
                }

        override fun newInstance(rows: Int, columns: Int, filler: (Int, Int) -> Number) = NumberMatrix(rows, columns, filler)

        override fun determinant(): Double =
                when {
                    rows != columns -> throw RuntimeException("Cannot calculate determinant for a non-square matrix: ${toString()}")
                    rows == 2 && columns == 2 -> this[0][0].toDouble() * this[1][1].toDouble() - this[0][1].toDouble() * this[1][0].toDouble()
                    else -> {
                        var determinant = 0.0
                        for (i in 0 until columns) {
                            val sign = if ((i + 2) % 2 == 0) 1.0 else -1.0
                            determinant += sign * this[0][i].toDouble() *
                                    NumberMatrix(rows - 1, columns - 1)
                                    { row, column -> this[row + 1][if (column >= i) column + 1 else column] }
                                            .determinant()
                        }
                        determinant
                    }
                }

    }


    sealed class MatrixCommand(val rawValue: Int) {
        object Addition : MatrixCommand(1)
        object MultiplicationByNumber : MatrixCommand(2)
        object MultiplicationByMatrix : MatrixCommand(3)
        object TransposeMatrix : MatrixCommand(4)
        object CalculateDeterminant : MatrixCommand(5)
        class Exit(value: Int) : MatrixCommand(value)

        companion object {
            fun forValue(value: Int) =
                    when (value) {
                        Addition.rawValue -> Addition
                        MultiplicationByNumber.rawValue -> MultiplicationByNumber
                        MultiplicationByMatrix.rawValue -> MultiplicationByMatrix
                        TransposeMatrix.rawValue -> TransposeMatrix
                        CalculateDeterminant.rawValue -> CalculateDeterminant
                        else -> Exit(value)
                    }
        }
    }

    sealed class TransposeCommand(val rawValue: Int) {
        object MainDiagonal : TransposeCommand(1)
        object SideDiagonal : TransposeCommand(2)
        object VerticalLine : TransposeCommand(3)
        object HorizontalLine : TransposeCommand(4)
        class Unknown(value: Int) : TransposeCommand(value)

        companion object {
            fun forValue(value: Int) =
                    when (value) {
                        MainDiagonal.rawValue -> MainDiagonal
                        SideDiagonal.rawValue -> SideDiagonal
                        VerticalLine.rawValue -> VerticalLine
                        HorizontalLine.rawValue -> HorizontalLine
                        else -> Unknown(value)
                    }
        }
    }

    class WrongMatrixSize(matrix1: Matrix<*>, matrix2: Matrix<*>) :
            RuntimeException("Matrices must be of equal size to be summed. Actual size for lhs (${matrix1.rows}, ${matrix1.columns}) and for rhs (${matrix2.rows}, ${matrix2.columns})")


    fun main() {
        val scanner = Scanner(System.`in`)

        var isTerminated = false
        while (!isTerminated) {
            println("""
                1. Add matrices
                2. Multiply matrix to a constant
                3. Multiply matrices
                4. Transpose matrix
                5. Calculate a determinant
                0. Exit
                Your choice:
                """.trimIndent())

            when (MatrixCommand.forValue(scanner.nextInt())) {
                MatrixCommand.Addition -> addition(scanner)
                MatrixCommand.MultiplicationByNumber -> multiplicationByNumber(scanner)
                MatrixCommand.MultiplicationByMatrix -> multiplicationByMatrix(scanner)
                MatrixCommand.TransposeMatrix -> transposeMatrix(scanner)
                MatrixCommand.CalculateDeterminant -> calculateDeterminant(scanner)
                is MatrixCommand.Exit -> isTerminated = true
            }
        }
    }

    private fun readMatrix(firstMessage: String = "Enter size of matrix:", secondMessage: String = "Enter matrix:", scanner: Scanner): Matrix<*> {
        if (!firstMessage.isBlank()) {
            println(firstMessage)
        }
        val firstMatrixSize = Pair(scanner.nextInt(), scanner.nextInt())

        if (!secondMessage.isBlank()) {
            println(secondMessage)
        }
        return newMatrix(ofSize = firstMatrixSize, scanner = scanner)
    }

    private fun transposeMatrix(scanner: Scanner) {
        println("""
            1. Main diagonal
            2. Side diagonal
            3. Vertical line
            4. Horizontal line
            Your choice:
        """.trimIndent())

        val transposeCommand = TransposeCommand.forValue(scanner.nextInt())

        if (transposeCommand is TransposeCommand.Unknown) {
            println("Wrong transpose command")
            return
        }

        val matrix = readMatrix(scanner = scanner).transpose(transposeCommand)
        println("The result is:")
        println(matrix)
    }

    private fun addition(scanner: Scanner) {
        val firstMatrix = readMatrix("Enter size of first matrix:",
                "Enter first matrix:",
                scanner = scanner)

        val secondMatrix = readMatrix("Enter size of second matrix:",
                scanner = scanner)

        try {
            val resultMatrix = firstMatrix + secondMatrix
            println("The addition result is:\n$resultMatrix")
        } catch (error: WrongMatrixSize) {
            println("ERROR")
        }
    }

    private fun newMatrix(ofSize: Pair<Int, Int>, scanner: Scanner) =
            NumberMatrix(ofSize.first, ofSize.second) { _, _ ->
                when {
                    scanner.hasNextInt() -> scanner.nextInt()
                    scanner.hasNextDouble() -> scanner.nextDouble()
                    else -> throw RuntimeException("Wrong input type of matrix data")
                }
            }
    //        when {
    //    scanner.hasNextInt() -> IntMatrix(ofSize.first, ofSize.second) { _, _ -> scanner.nextInt() }
    //    scanner.hasNextDouble() -> DoubleMatrix(ofSize.first, ofSize.second) { _, _ -> scanner.nextDouble() }
    //    else -> throw RuntimeException("Wrong input type of matrix data")
    //}

    private fun multiplicationByNumber(scanner: Scanner) {
        val firstMatrix = readMatrix(scanner = scanner)
        println("Enter multiplier:")
        println("The multiplication result is:")
        println(firstMatrix.times(scanner.nextInt()))
    }

    private fun multiplicationByMatrix(scanner: Scanner) {
        val firstMatrix = readMatrix("Enter size of first matrix:",
                "Enter first matrix:",
                scanner = scanner)

        val secondMatrix = readMatrix("Enter size of second matrix:",
                scanner = scanner)

        println("The multiplication result is:")
        println(firstMatrix * secondMatrix)
    }

    private fun calculateDeterminant(scanner: Scanner) {
        val determinant = readMatrix(scanner = scanner).determinant()
        println("The result is:")
        println(determinant)
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/87/stages/485/implement
status: Solved
record: 6
